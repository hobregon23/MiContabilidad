@page "/admin/usuarios"
@inject IOpcionesAdminService adminService
@inject CuentasService cuentasService
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

<div class="container space-1">
    <div class="mb-4">
        <h1 class="h3 text-primary font-weight-normal mb-0">Opciones de <span class="font-weight-semi-bold">administración</span></h1>
        <p>Administra las funciones de la web.</p>
    </div>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-3 w-md-75 w-lg-40 mx-md-auto mb-3 pt-4 pr-5">
                <AdminNavPag ItemActive="Usuarios" />
            </div>

            <div class="col-md-9 w-md-75 w-lg-40 mx-md-auto">
                <div class="table-responsive-sm">

                    @if (UsersList.Count.Equals(0))
                    {
                        <p class="text-danger" style="text-align: center">N/A</p>
                    }
                    else
                    {
                        <table class="table table-light">
                            <thead>
                                <tr style="font-size: small; color: white; background-image: linear-gradient(182deg, rgb(8, 38, 123) 0%, #4f1056 90%);">
                                    <th>Usuario</th>
                                    <th>Nombre completo</th>
                                    <th>Correo</th>
                                    <th>Rol</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody class="font-size-1" style="font-family: 'Arial Rounded MT'">
                                @foreach (var item in UsersList)
                                {
                                <tr class="my-transition-3d-hover">
                                    <td class="align-middle"><a class="text-danger" style="font-size: small">@item.UserName</a></td>
                                    <td class="align-middle"><a style="color: #575d5d; font-size: small">@item.Name @item.LastName</a></td>
                                    <td class="align-middle"><a class="text-info" style="font-size: small">@item.Email</a></td>
                                    <td class="align-middle"><a class="text-success" style="font-size: small">@(UserRol[item.Id])</a></td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-danger transition-3d-hover" style="border-radius:20px 20px 20px 20px" @onclick="@(() => Eliminar(item.Id))">
                                            <span class="oi oi-trash" aria-hidden="true"></span>
                                        </button>
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <Paginacion TotaPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="3" SelectedPage="SelectedPage"></Paginacion>
            </div>
        </div>

    </div>
</div>



@code {

    private List<ApplicationUser> UsersList { get; set; } = new List<ApplicationUser>();
    private int totalPageQuantity;
    private int currentPage = 1;
    private Dictionary<string, string> UserRol { get; set; } = new Dictionary<string, string>();
    private string Token { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        Token = await JS.GetFromLocalStorage("TOKENKEY");
        await LoadItems();
        StateHasChanged();
    }

    async Task LoadItems(int page = 1, int quantityPerPage = 5)
    {
        totalPageQuantity = (await cuentasService.GetPag(new Pagination() { Page = page, QuantityPerPage = quantityPerPage }, string.Empty, Token)).CantPorPag;
        UsersList = (await cuentasService.GetPag(new Pagination() { Page = page, QuantityPerPage = quantityPerPage }, string.Empty, Token)).ListaObjetos.ToList();
        await GetUserRol();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadItems(page);
    }

    private async Task GetUserRol()
    {
        UserRol = new Dictionary<string, string>();
        foreach (var item in UsersList)
        {
            var rol = await cuentasService.GetUserRol(item.Id);
            UserRol.Add(item.Id, rol);
        }
    }

    private async Task Eliminar(string id)
    {
        if (await JS.ConfirmSinResp($"Eliminar", $"Esto eliminará permanentemente al usuario."))
        {
            var resp = await cuentasService.Eliminar(id, Token);
            if (resp.ToString().Contains("Bad"))
                await JS.MostrarMensaje("Error", "Trate de nuevo", IJSExtensions.TipoMensajeSweetAlert.error);
            else if (resp.ToString().Contains("Conflict"))
                await JS.MostrarMensaje("Error", "No permitido", IJSExtensions.TipoMensajeSweetAlert.error);
            else if (resp.ToString().Contains("Ok"))
                await JS.MostrarMensaje("Éxito", "Realizado exitosamente", IJSExtensions.TipoMensajeSweetAlert.success);
        }
        await LoadItems(currentPage);
    }

}
