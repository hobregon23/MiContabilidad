@inject IJSRuntime JS
@inject IModelosServicio modelosService
@inject NavigationManager navi

<div class="modal" tabindex="-1" data-backdrop="static" role="dialog" id="taskModal-edit">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Editar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ObjetoEdit" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <ValidationSummary />
                        <label for="taskName">Marca</label>
                        <select class="form-control" style="font-weight:bold" @bind="@MarcaIdString" required>
                            @foreach (var item in Marcas)
                            {
                                <option value="@item.Id">
                                    @item.Nombre
                                </option>
                            }
                        </select>
                        <label for="taskName">Nombre</label>
                        <InputText id="name" placeholder="ej: stylo 3" class="form-control" @bind-Value="@ObjetoEdit.Nombre" />
                    </div>
                    <button type="submit" class="btn btn-primary">Actualizar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <DataAnnotationsValidator />
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public Modelo ObjetoEdit { get; set; }

    [Parameter]
    public List<Marca> Marcas { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public string Token { get; set; } = "";

    public string MarcaIdString
    {
        get
        {
            return ObjetoEdit.MarcaId.ToString();
        }
        set
        {
            ObjetoEdit.MarcaId = int.Parse(value);
        }
    }

    private async Task CloseTaskModal()
    {
        await JS.InvokeAsync<object>("CloseModal", "taskModal-edit");
    }

    private async void HandleValidSubmit()
    {
        await modelosService.Update(ObjetoEdit, Token);
        await CloseTaskModal();
        DataChanged?.Invoke();
        navi.NavigateTo("/modelos", true);
    }

}
