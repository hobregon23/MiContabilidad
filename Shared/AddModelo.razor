@inject IJSRuntime JS
@inject IModelosServicio modelosService

<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Agregar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ObjetoAdd" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <ValidationSummary />
                        <label for="taskName">Marca</label>
                        <select class="form-control" style="font-weight:bold" @bind="@MarcaIdString" required>
                            @foreach (var item in Marcas)
                            {
                                <option value="@item.Id">
                                    @item.Nombre
                                </option>
                            }
                        </select>
                        <label for="taskName">Nombre</label>
                        <InputText id="name" placeholder="ej: stylo 3" class="form-control" @bind-Value="@ObjetoAdd.Nombre" />
                    </div>
                    <button type="submit" class="btn btn-primary">Agregar</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                    <DataAnnotationsValidator />
                </EditForm>
            </div>
        </div>
    </div>
</div>





@code {

    [Parameter]
    public Modelo ObjetoAdd { get; set; }

    [Parameter]
    public List<Marca> Marcas { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public string Token { get; set; } = "";

    public string MarcaIdString
    {
        get
        {
            return ObjetoAdd.MarcaId.ToString();
        }
        set
        {
            ObjetoAdd.MarcaId = int.Parse(value);
        }
    }

    private async Task CloseTaskModal()
    {
        await JS.InvokeAsync<object>("CloseModal", "taskModal");
    }

    private async void HandleValidSubmit()
    {
        var exist = (await modelosService.Exist(ObjetoAdd.Nombre)).Value;
        if (exist)
        {
            await JS.MostrarMensaje("Error", $"{ObjetoAdd.Nombre} ya existe.", IJSExtensions.TipoMensajeSweetAlert.error);
        }
        else
        {
            await modelosService.Add(ObjetoAdd, Token);
            await CloseTaskModal();
            DataChanged?.Invoke();
        }
    }

}
